'use server';

/**
 * @fileOverview AI flow for generating outfit suggestions based on user preferences.
 *
 * - generateOutfit - A function that generates outfit suggestions.
 * - GenerateOutfitInput - The input type for the generateOutfit function.
 * - GenerateOutfitOutput - The return type for the generateOutfit function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateOutfitInputSchema = z.object({
  wardrobe: z.string().describe('The user\'s wardrobe, as a JSON string.'),
  userStyle: z.string().describe('The user\'s style preferences.'),
  climate: z.string().describe('The current weather conditions.'),
  occasion: z.string().describe('The occasion for which the outfit is needed.'),
  mannequinPreference: z.string().describe('The user\'s preference for the mannequin.'),
});
export type GenerateOutfitInput = z.infer<typeof GenerateOutfitInputSchema>;

const GenerateOutfitOutputSchema = z.object({
  outfitSuggestion: z.string().describe('A description of the suggested outfit.'),
  reasoning: z.string().describe('The stylist\'s notes explaining the outfit choice.'),
  mannequinPhotoDataUri: z
    .string()
    .describe(
      'A photo of a mannequin wearing the outfit, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' +
        'This image will be generated by the model.'
    ),
});
export type GenerateOutfitOutput = z.infer<typeof GenerateOutfitOutputSchema>;

export async function generateOutfit(input: GenerateOutfitInput): Promise<GenerateOutfitOutput> {
  return generateOutfitFlow(input);
}

const outfitSuggestionPrompt = ai.definePrompt({
  name: 'outfitSuggestionPrompt',
  input: {schema: GenerateOutfitInputSchema},
  output: {schema: GenerateOutfitOutputSchema},
  prompt: `You are a personal stylist helping users choose an outfit from their wardrobe.

  Given the following information, please suggest an outfit and explain your reasoning.

  Wardrobe: {{{wardrobe}}}
  User Style: {{{userStyle}}}
  Climate: {{{climate}}}
  Occasion: {{{occasion}}}

  Reasoning: Briefly explain why you chose this outfit and how it fits the user's needs.
  Outfit Suggestion: A description of the suggested outfit.

  {{#json}}
  { "outfitSuggestion": "...", "reasoning": "..." }
  {{/json}}`,
});

const imageGenerationPrompt = ai.definePrompt({
  name: 'imageGenerationPrompt',
  input: {schema: GenerateOutfitOutputSchema},
  output: {schema: z.object({mannequinPhotoDataUri: z.string()})},
  prompt: `Create an image of a mannequin wearing the following outfit.

  Outfit Suggestion: {{{outfitSuggestion}}}

  The mannequin should match the following preference: {{{mannequinPreference}}}.

  Return the image as a data URI with MIME type and Base64 encoding.

  {{media url=mannequinPhotoDataUri}}
  `,
});

const generateOutfitFlow = ai.defineFlow(
  {
    name: 'generateOutfitFlow',
    inputSchema: GenerateOutfitInputSchema,
    outputSchema: GenerateOutfitOutputSchema,
  },
  async input => {
    const {output: outfitSuggestionResult} = await outfitSuggestionPrompt(input);

    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: outfitSuggestionResult!.outfitSuggestion,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    return {
      outfitSuggestion: outfitSuggestionResult!.outfitSuggestion,
      reasoning: outfitSuggestionResult!.reasoning,
      mannequinPhotoDataUri: media?.url ?? '',
    };
  }
);
